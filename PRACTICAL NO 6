# PRACTICAL NO 6 IMPLEMENT BULLY AND BING ALGORITHM

class BullyAlgorithm:
    def __init__(self, node_id, nodes):
        self.node_id = node_id
        self.nodes = nodes

    def start_election(self):
        highest_node_id = self.node_id

        # Send "Coordinator Election" messages to all higher ID nodes
        for i in range(self.node_id + 1, max(self.nodes) + 1):
            if i in self.nodes:
                print(f"Node {self.node_id} sends Coordinator Election message to Node {i}")

        # Wait for "OK" messages from all higher ID nodes
        for i in range(self.node_id + 1, max(self.nodes) + 1):
            if i in self.nodes:
                print(f"Node {self.node_id} waiting for OK message from Node {i}")
                print(f"Node {self.node_id} received OK message from Node {i}")
                highest_node_id = i

        # If there is a higher ID node, let it be the coordinator
        if highest_node_id != self.node_id:
            print(f"Node {self.node_id} acknowledges Node {highest_node_id} as the new coordinator")
        else:
            print(f"Node {self.node_id} is the new coordinator")

# Create a list of node IDs
nodes = [1, 2, 3, 4, 5]

# Create an instance of BullyAlgorithm with a specific node ID and the list of nodes
bully = BullyAlgorithm(3, nodes)

# Start the election process
bully.start_election()
